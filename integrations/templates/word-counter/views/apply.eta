<% layout("./layout") %>

<div x-data="page">
	<p>Click the button below to update the Pub with the number words and/or lines in its content.</p>
	<!-- Fields -->
	<button @click="update" :aria-invalid="!!error" :class="{ loading }" aria-errormessage="error">Update Word Counts</button>
	<!-- Alerts -->
	<div class="alert success" x-show="success" x-cloak x-transition>
		<!-- Metadata -->
		<table class="metadata" x-show="words || lines" x-cloak x-transition>
			<thead>
				<tr>
					<th x-show="words" x-transition>word-counter/word-count</th>
					<th x-show="lines" x-transition>word-counter/line-count</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td x-show="words" x-transition x-text="words"></td>
					<td x-show="lines" x-transition x-text="lines"></td>
				</tr>
			</tbody>
		</table>
		<strong>Success!</strong>
		<p>Pub metadata updated</p>
	</div>
	<div id="error" class="alert failure" x-show="error" x-cloak x-transition>
		<strong x-text="error?.message"></strong>
		<p x-text="error?.cause"></p>
	</div>
</div>

<script>
  async function update() {
		this.error = null
		this.loading = true
		const req = await fetch(`/apply?instanceId=<%= it.instanceId %>&pubId=<%= it.pubId %>`, {
			method: "POST",
		})
		this.loading = false
		const res = await req.json()
		if (req.ok) {
			this.words = res.words
			this.lines = res.lines
			this.success = true
		} else {
			this.error = res ?? { message: "an unexpected error occurred" }
		}
	}

	document.addEventListener("alpine:init", () => {
		Alpine.data("page", () => ({
			words: 0,
			lines: 0,
			error: undefined,
			loading: false,
			success: false,
			update,
		}))
	})
</script>
