<% layout("./layout") %>

<div x-data="page">
	<p>Select one or more counting metric(s) to apply to Pub content.</p>
	<fieldset class="checkbox-group">
		<label class="checkbox" for="words">
			<input id="words" type="checkbox" x-model="words" @click="toggle('words')" />
			<span>Words</span>
		</label>
		<label class="checkbox" for="lines">
			<input id="lines" type="checkbox" x-model="lines" @click="toggle('lines')" />
			<span>Lines</span>
		</label>
	</fieldset>
	<!-- Alerts -->
	<div class="alert success" x-show="success" x-cloak x-transition>
		<strong>Success!</strong>
		<p>Instance configured</p>
	</div>
	<div id="error" class="alert failure" x-show="error" x-cloak x-transition>
		<strong x-text="error?.message"></strong>
		<p x-text="error?.cause"></p>
	</div>
</div>

<script>
	function toggle(kind) {
		return event => {
			const other = kind === "words" ? "lines" : "words"
			if (this[kind] && !this[other]) {
				event.preventDefault()
			} else {
				this[kind] = !this[kind]
				this.update()
			}
		}
	}

	async function update() {
		this.error = false
		this.success = false
		const req = await fetch(`/configure?instanceId=<%= it.instanceId %>`, {
			method: "PUT",
			headers: { "Content-Type": "application/json" },
			body: JSON.stringify({ words: this.words, lines: this.lines }),
		})
		if (req.ok) {
			this.success = true
			return req.json()
		} else {
			this.error = await req.json()
		}
	}

	document.addEventListener("alpine:init", () => {
		Alpine.data("page", () => ({
			lines: <%= it.instanceConfig.lines %>,
			words: <%= it.instanceConfig.words %>,
			error: false,
			success: false,
			update,
			toggle,
		}))
	})
</script>
