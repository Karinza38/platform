// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id        String   @id @default(uuid())
  slug      String   @unique
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Community {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  pubTypes PubType[]
  pubs     Pub[]

  @@map(name: "communities")
}

model Pub {
  id          String    @id @default(uuid())
  parent      Pub?      @relation("parent_child", fields: [parentId], references: [id])
  parentId    String?   @map(name: "parent_id")
  pubType     PubType   @relation(fields: [pubTypeId], references: [id])
  pubTypeId   String    @map(name: "pub_type_id")
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  children Pub[]      @relation("parent_child")
  metadata Metadata[]

  @@map(name: "pubs")
}

model PubType {
  id          String    @id @default(uuid())
  name        String
  fields      Json
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  pubs Pub[]

  @@map(name: "pub_types")
}

model Metadata {
  id        String   @id @default(uuid())
  type      String
  value     Json
  pub       Pub      @relation(fields: [pubId], references: [id])
  pubId     String   @map(name: "pub_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "metadata")
}

model Workflow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "workflows")
}

model Stage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "stages")
}

model Members {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  //    Permissions can be scoped to whole community or a selection of pubs
  @@map(name: "members")
}

model MemberGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "member_groups")
}

model Integration {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "integrations")
}

model Pin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "pins")
}
