// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id        String   @id @default(uuid())
  slug      String   @unique
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  claims ActionClaim[]
  moves  ActionMove[]
  pins   Pin[]

  @@map(name: "users")
}

model Community {
  id        String   @id @default(uuid())
  name      String
  avatar    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  pubTypes             PubType[]
  pubs                 Pub[]
  workflows            Workflow[]
  integrationInstances IntegrationInstance[]

  @@map(name: "communities")
}

model Pub {
  id          String    @id @default(uuid())
  valuesBlob  Json?
  pubType     PubType   @relation(fields: [pubTypeId], references: [id])
  pubTypeId   String    @map(name: "pub_type_id")
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  values               PubValue[]
  stages               Stage[]
  claims               ActionClaim[]
  moves                ActionMove[]
  integrationInstances IntegrationInstance[]
  pins                 Pin[]

  @@map(name: "pubs")
}

model PubField {
  id            String       @id @default(uuid())
  name          String
  integration   Integration? @relation(fields: [integrationId], references: [id])
  integrationId String?      @map(name: "integration_id")
  createdAt     DateTime     @default(now()) @map(name: "created_at")
  updatedAt     DateTime     @default(now()) @updatedAt @map(name: "updated_at")

  values   PubValue[]
  pubTypes PubType[]

  @@map(name: "pub_fields")
}

model PubValue {
  id        String   @id @default(uuid())
  field     PubField @relation(fields: [fieldId], references: [id])
  fieldId   String   @map(name: "field_id")
  value     Json
  pub       Pub      @relation(fields: [pubId], references: [id])
  pubId     String   @map(name: "pub_id")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Add userId and integrationId to track who created the value

  @@map(name: "pub_values")
}

model PubType {
  id          String    @id @default(uuid())
  name        String
  description String?
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  fields PubField[]
  pubs   Pub[]

  @@map(name: "pub_types")
}

model Workflow {
  id          String    @id @default(uuid())
  name        String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String    @map(name: "community_id")
  createdAt   DateTime  @default(now()) @map(name: "created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  stages Stage[]
  pins   Pin[]

  @@map(name: "workflows")
}

model Stage {
  id         String   @id @default(uuid())
  name       String
  order      String
  workflow   Workflow @relation(fields: [workflowId], references: [id])
  workflowId String   @map(name: "workflow_id")
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

  pubs                  Pub[]
  moveConstraints       MoveConstraint[]      @relation("move_constraint")
  moveConstraintSources MoveConstraint[]      @relation("move_constraint_destination")
  claims                ActionClaim[]
  movesFrom             ActionMove[]          @relation("move_source_stage")
  movesTo               ActionMove[]          @relation("move_destination_stage")
  integrationInstances  IntegrationInstance[]

  @@map(name: "stages")
}

// Pub-Stage m:m relationship is implicit. If we need additional data on that relationship, we can make it explicit

model MoveConstraint {
  id            String   @id @default(uuid())
  stage         Stage    @relation("move_constraint", fields: [stageId], references: [id])
  stageId       String   @map(name: "stage_id")
  destination   Stage    @relation("move_constraint_destination", fields: [destinationId], references: [id])
  destinationId String   @map(name: "destination_id")
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "move_constraint")
}

model ActionClaim {
  id         String    @id @default(uuid())
  stage      Stage     @relation(fields: [stageId], references: [id])
  stageId    String    @map(name: "stage_id")
  pub        Pub       @relation(fields: [pubId], references: [id])
  pubId      String    @map(name: "pub_id")
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map(name: "user_id")
  releasedAt DateTime?
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "action_claim")
}

model ActionMove {
  id                 String   @id @default(uuid())
  sourceStage        Stage    @relation("move_source_stage", fields: [sourceStageId], references: [id])
  sourceStageId      String   @map(name: "source_stage_id")
  destinationStage   Stage    @relation("move_destination_stage", fields: [destinationStageId], references: [id])
  destinationStageId String   @map(name: "destination_stage_id")
  pub                Pub      @relation(fields: [pubId], references: [id])
  pubId              String   @map(name: "pub_id")
  user               User     @relation(fields: [userId], references: [id])
  userId             String   @map(name: "user_id")
  note               String
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "action_move")
}

model Members {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Permissions can be scoped to whole community or a selection of pubs
  @@map(name: "members")
}

model MemberGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "member_groups")
}

model Integration {
  id          String   @id @default(uuid())
  name        String
  actions     Json
  settingsUrl String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  instances IntegrationInstance[]
  pubFields PubField[]

  @@map(name: "integrations")
}

model IntegrationInstance {
  id            String      @id @default(uuid())
  name          String
  integration   Integration @relation(fields: [integrationId], references: [id])
  integrationId String      @map(name: "integration_id")
  community     Community   @relation(fields: [communityId], references: [id])
  communityId   String      @map(name: "community_id")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map(name: "updated_at")

  pubs   Pub[]
  stages Stage[]
  pins   Pin[]

  @@map(name: "integration_instances")
}

model Pin {
  id         String               @id @default(uuid())
  user       User                 @relation(fields: [userId], references: [id])
  userId     String               @map(name: "user_id")
  pub        Pub?                 @relation(fields: [pubId], references: [id])
  pubId      String?              @map(name: "pub_id")
  workflow   Workflow?            @relation(fields: [workflowId], references: [id])
  workflowId String?              @map(name: "workflow_id")
  instance   IntegrationInstance? @relation(fields: [instanceId], references: [id])
  instanceId String?              @map(name: "instance_id")
  createdAt  DateTime             @default(now()) @map(name: "created_at")
  updatedAt  DateTime             @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "pins")
}
